// Generated by CoffeeScript 1.6.3
(function() {
  var KrakenClient, MA, buy, check_moving_average, get_market_price, invested, kraken, kraken_api_key, kraken_api_secret, kraken_config, sell;

  KrakenClient = require('kraken-api');

  kraken_config = require('./kraken-config');

  kraken_api_key = kraken_config.api_key;

  kraken_api_secret = kraken_config.api_secret;

  kraken = new KrakenClient(kraken_api_key, kraken_api_secret);

  MA = require('./js/moving_average/moving_average');

  invested = true;

  kraken.api('Balance', null, function(error, data) {
    console.log("Balance");
    if (error) {
      return console.log(error);
    } else {
      return console.log(data);
    }
  });

  get_market_price = function(callback) {
    console.log("Getting market prices");
    return kraken.api('Ticker', {
      'pair': 'XXBTZEUR'
    }, function(error, data) {
      var prices;
      prices = {};
      if (error) {
        console.log(error);
      } else {
        prices = {
          'market_buy': data.result['XXBTZEUR']['a'][0],
          'market_sell': data.result['XXBTZEUR']['b'][0]
        };
      }
      if (callback) {
        return callback(error, prices);
      }
    });
  };

  sell = function() {
    return get_market_price(function(error, prices) {
      console.log("TRANSACTION Selling at " + prices.market_sell);
      return invested = false;
    });
  };

  buy = function() {
    return get_market_price(function(error, prices) {
      console.log("TRANSACTION Buying at " + prices.market_buy);
      return invested = true;
    });
  };

  check_moving_average = function() {
    console.log("-----------------------------------");
    return kraken.api('Trades', {
      'pair': 'XXBTZEUR'
    }, function(error, data) {
      var data_set, i, least_difference, ma_long, ma_long_size, ma_long_value, ma_short, ma_short_size, ma_short_value, _i, _j, _ref, _ref1, _ref2, _ref3;
      if (error) {
        return console.log(error);
      } else {
        data_set = data.result['XXBTZEUR'];
        console.log("Data set length " + data_set.length);
        ma_long_size = 1000;
        ma_short_size = 300;
        ma_long = new MA(ma_long_size);
        for (i = _i = _ref = data_set.length - ma_long_size, _ref1 = data_set.length - 1; _ref <= _ref1 ? _i <= _ref1 : _i >= _ref1; i = _ref <= _ref1 ? ++_i : --_i) {
          ma_long.push(i, parseInt(data_set[i][0], 10));
        }
        ma_long_value = ma_long.movingAverage();
        console.log("Moving average for last " + ma_long_size + " = " + ma_long_value);
        ma_short = new MA(ma_short_size);
        for (i = _j = _ref2 = data_set.length - ma_short_size, _ref3 = data_set.length - 1; _ref2 <= _ref3 ? _j <= _ref3 : _j >= _ref3; i = _ref2 <= _ref3 ? ++_j : --_j) {
          ma_short.push(i, parseInt(data_set[i][0], 10));
        }
        ma_short_value = ma_short.movingAverage();
        console.log("Moving average for last " + ma_short_size + " = " + ma_short_value);
        least_difference = 0;
        if ((ma_short_value + least_difference < ma_long_value) && invested) {
          console.log("Going down let's sell");
          sell();
          invested = true;
        } else if ((ma_short_value - least_difference > ma_long_value) && !invested) {
          console.log("Going up let's buy");
          buy();
          invested = false;
        } else {
          console.log("Least difference is " + least_difference);
          console.log("Difference is " + (Math.abs(ma_short_value - ma_long_value)));
          console.log("Invested = " + invested);
        }
        return setTimeout(check_moving_average, 10000);
      }
    });
  };

  check_moving_average();

}).call(this);
