// Generated by CoffeeScript 1.6.3
(function() {
  var KrakenClient, MA, buy, buy_price, check_moving_average, fee_percent, get_market_price, invested, kraken, kraken_api_key, kraken_api_secret, kraken_config, kraken_timeout, least_difference, mandrill, mandrill_client, mandrill_config, message, sell, sell_price;

  KrakenClient = require('kraken-api');

  kraken_config = require('./kraken-config');

  kraken_api_key = kraken_config.api_key;

  kraken_api_secret = kraken_config.api_secret;

  kraken_timeout = 60000 * 2;

  kraken = new KrakenClient(kraken_api_key, kraken_api_secret);

  least_difference = 2;

  buy_price = 0;

  sell_price = 0;

  fee_percent = 0.4;

  MA = require('./js/moving_average/moving_average');

  mandrill = require('mandrill-api/mandrill');

  mandrill_config = require('./mandrill-config');

  mandrill_client = new mandrill.Mandrill(mandrill_config.api_key);

  message = {
    'from_email': mandrill_config.send_from,
    'to': mandrill_config.send_to,
    'important': true
  };

  invested = false;

  kraken.api('Balance', null, function(error, data) {
    console.log("Balance");
    if (error) {
      return console.log(error);
    } else {
      return console.log(data);
    }
  });

  get_market_price = function(callback) {
    console.log("Getting market prices");
    return kraken.api('Ticker', {
      'pair': 'XXBTZEUR'
    }, function(error, data) {
      var prices;
      prices = {};
      if (error) {
        console.log(error);
      } else {
        prices = {
          'market_buy': data.result['XXBTZEUR']['a'][0],
          'market_sell': data.result['XXBTZEUR']['b'][0]
        };
      }
      if (callback) {
        return callback(error, prices);
      }
    });
  };

  sell = function(difference, volume_long, volume_short) {
    return get_market_price(function(error, prices) {
      var timestamp;
      if (prices.market_sell <= (buy_price + (buy_price * fee_percent / 100))) {
        message['subject'] = "Trying to sell but the selling price is too low";
        message['text'] = '';
        message['html'] = "Selling price " + prices.market_sell + "<br />";
        message['html'] += "Bought at " + buy_price + ", with fee must be at least " + (buy_price * fee_percent / 100) + "<br />";
        mandrill_client.messages.send({
          'message': message
        }, function(result) {
          return console.log(result);
        });
        return false;
      }
      timestamp = new Date();
      console.log("" + (timestamp.toUTCString()) + " TRANSACTION Selling at " + prices.market_sell);
      invested = false;
      sell_price = prices.market_sell;
      message['subject'] = "You should sell at " + prices.market_sell;
      message['text'] = '';
      message['html'] = '';
      message['html'] += "Current difference is " + difference + " <br />";
      message['html'] += "Volume for long is " + volume_long + "<br />";
      message['html'] += "Volume for short is " + volume_short + "<br />";
      return mandrill_client.messages.send({
        'message': message
      }, function(result) {
        return console.log(result);
      });
    });
  };

  buy = function(difference, volume_long, volume_short) {
    return get_market_price(function(error, prices) {
      var timestamp;
      timestamp = new Date();
      console.log("" + (timestamp.toUTCString()) + " TRANSACTION Buying at " + prices.market_buy);
      invested = true;
      buy_price = prices.market_buy;
      message['subject'] = "You should buy at " + prices.market_sell;
      message['text'] = '';
      message['html'] = '';
      message['html'] += "Current difference is " + difference + " <br />";
      message['html'] += "Volume for long is " + volume_long + "<br />";
      message['html'] += "Volume for short is " + volume_short + "<br />";
      return mandrill_client.messages.send({
        'message': message
      }, function(result) {
        return console.log(result);
      });
    });
  };

  check_moving_average = function() {
    console.log("-----------------------------------");
    return kraken.api('Trades', {
      'pair': 'XXBTZEUR'
    }, function(error, data) {
      var data_set, difference, i, ma_long, ma_long_size, ma_long_value, ma_short, ma_short_size, ma_short_value, trade_data, volume_long, volume_short, _i, _j, _ref, _ref1, _ref2, _ref3;
      if (error) {
        return console.log(error);
      } else {
        data_set = data.result['XXBTZEUR'];
        console.log("Data set length " + data_set.length);
        ma_long_size = parseInt(data_set.length, 10);
        ma_short_size = parseInt(data_set.length / 3, 10);
        volume_long = 0;
        volume_short = 0;
        ma_long = new MA(ma_long_size);
        for (i = _i = _ref = data_set.length - ma_long_size, _ref1 = data_set.length - 1; _ref <= _ref1 ? _i <= _ref1 : _i >= _ref1; i = _ref <= _ref1 ? ++_i : --_i) {
          trade_data = {
            'price': parseFloat(data_set[i][0]),
            'volume': parseFloat(data_set[i][1]),
            'time': parseFloat(data_set[i][2]),
            'buy/sell': data_set[i][3],
            'market/limit': data_set[i][4],
            'miscellaneous': data_set[i][5]
          };
          volume_long += trade_data['volume'];
          ma_long.push(i, trade_data['price']);
        }
        ma_long_value = ma_long.movingAverage();
        console.log("Moving average for last " + ma_long_size + " = " + ma_long_value);
        ma_short = new MA(ma_short_size);
        for (i = _j = _ref2 = data_set.length - ma_short_size, _ref3 = data_set.length - 1; _ref2 <= _ref3 ? _j <= _ref3 : _j >= _ref3; i = _ref2 <= _ref3 ? ++_j : --_j) {
          trade_data = {
            'price': parseFloat(data_set[i][0]),
            'volume': parseFloat(data_set[i][1]),
            'time': parseFloat(data_set[i][2]),
            'buy/sell': data_set[i][3],
            'market/limit': data_set[i][4],
            'miscellaneous': data_set[i][5]
          };
          volume_short += trade_data['volume'];
          ma_short.push(i, trade_data['price']);
        }
        ma_short_value = ma_short.movingAverage();
        console.log("Moving average for last " + ma_short_size + " = " + ma_short_value);
        if ((ma_short_value + least_difference < ma_long_value) && invested) {
          console.log("Going down let's sell");
          difference = Math.abs(ma_short_value - ma_long_value);
          sell(difference, volume_long, volume_short);
          invested = true;
        } else if ((ma_short_value - least_difference > ma_long_value) && !invested) {
          console.log("Going up let's buy");
          difference = Math.abs(ma_short_value - ma_long_value);
          buy(difference, volume_long, volume_short);
          invested = false;
        } else {
          console.log("Difference is " + (Math.abs(ma_short_value - ma_long_value)));
          console.log("Invested = " + invested);
        }
        return setTimeout(check_moving_average, kraken_timeout);
      }
    });
  };

  check_moving_average();

}).call(this);
