// Generated by CoffeeScript 1.6.3
/*
    Moving average
*/


(function() {
  var MovingAverage, data_moving_average_long, data_moving_average_short, data_set, i, index, lineChartData, moving_average_long, moving_average_long_size, moving_average_short, moving_average_short_size, myLine, _i, _j, _k, _l, _ref, _ref1, _ref2, _ref3, _ref4, _results;

  MovingAverage = function(timespan) {
    var E, exp, ma, pow, previousTime, ret, v;
    exp = Math.exp;
    pow = Math.pow;
    E = Math.E;
    if (typeof timespan !== 'number') {
      console.log('must provide a timespan to the moving average constructor');
    }
    if (timespan <= 0) {
      console.log('must provide a timespan > 0 to the moving average constructor');
    }
    ma = 0;
    v = 0;
    previousTime = false;
    ret = {};
    ret.push = function(time, value) {
      var previousMa;
      if (previousTime) {
        previousMa = ma;
        ma = (value + (time - 1) * previousMa) / time;
      } else {
        ma = value;
      }
      return previousTime = true;
    };
    ret.movingAverage = function() {
      return ma;
    };
    ret.variance = function() {
      return v;
    };
    return ret;
  };

  /*
  ----------------------------------------------------------------------------------------
  */


  data_set = [];

  for (i = _i = 1; _i <= 30; i = ++_i) {
    data_set.push(Math.random() * 30);
  }

  /* Long moving average*/


  moving_average_long_size = 15;

  moving_average_long = new MovingAverage(moving_average_long_size);

  index = 1;

  for (i = _j = _ref = data_set.length - moving_average_long_size, _ref1 = data_set.length - 1; _ref <= _ref1 ? _j <= _ref1 : _j >= _ref1; i = _ref <= _ref1 ? ++_j : --_j) {
    moving_average_long.push(index++, data_set[i]);
  }

  data_moving_average_long = moving_average_long.movingAverage();

  console.log("Long moving average " + data_moving_average_long);

  /* Short moving average*/


  moving_average_short_size = 5;

  moving_average_short = new MovingAverage(moving_average_short_size);

  index = 1;

  for (i = _k = _ref2 = data_set.length - moving_average_short_size, _ref3 = data_set.length - 1; _ref2 <= _ref3 ? _k <= _ref3 : _k >= _ref3; i = _ref2 <= _ref3 ? ++_k : --_k) {
    moving_average_short.push(index++, data_set[i]);
  }

  data_moving_average_short = moving_average_short.movingAverage();

  console.log("Short moving average " + data_moving_average_short);

  /* ----*/


  lineChartData = {
    labels: (function() {
      _results = [];
      for (var _l = 1, _ref4 = data_set.length; 1 <= _ref4 ? _l <= _ref4 : _l >= _ref4; 1 <= _ref4 ? _l++ : _l--){ _results.push(_l); }
      return _results;
    }).apply(this),
    datasets: [
      {
        fillColor: "rgba(220,220,220,0.5)",
        strokeColor: "rgba(220,220,220,1)",
        pointColor: "rgba(220,220,220,1)",
        pointStrokeColor: "#fff",
        data: data_set
      }
    ]
  };

  myLine = new Chart(document.getElementById("canvas").getContext("2d")).Line(lineChartData);

}).call(this);
